library(ggplot2)
# Basic line plot with points
ggplot(data=head(quakes), aes(x=lat, y=mag, group=1)) +
geom_line(color="red")+
geom_point()
+ geom_point(aes(x=lat, y=mag, color=black))
quakes
ggplot(data = quakes, aes(x = lat, y=mag)) +
geom_point()
install.packages("ggplot2")
library(ggplot2)
quakes
ggplot(data = quakes, aes(x = lat, y=mag)) +
geom_point()
install.packages("ggplot2")
library(ggplot2)
quakes
ggplot(data = quakes, aes(x = lat, y=mag)) +
geom_point()
#雙變數
ggplot(data = quakes, aes(x = lat, y=mag)) +
geom_point()
#單變數
ggplot(data = quakes, aes(x = long)) +
geom_bar(fill = "lightblue", colour = "black")
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
#雙變數
ggplot(data = quakes, aes(x = long, y=depth)) +
geom_point()
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
#雙變數
ggplot(data = quakes, aes(x = long, y=depth)) +
geom_point()
...{r}
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
#雙變數
ggplot(data = quakes, aes(x = long, y=depth)) +
geom_point()
...{r}
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
...
#雙變數
ggplot(data = quakes, aes(x = long, y=depth)) +
geom_point()
...{r}
library(ggplot2)
quakes
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
...
...{r}
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
...
'''{r}
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
'''
'''{r}
library(ggplot2)
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
'''
---
'''{r}
library(ggplot2)
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
'''
```{r}
```{r}
```{r}
library(ggplot2)
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
library(ggplot2)
#單變數
ggplot(data = quakes, aes(x = stations)) +
geom_bar(fill = "lightblue", colour = "black")
library(ggplot2)
#雙變數
ggplot(data = quakes, aes(x = long, y=depth)) +
geom_point()
ggplot(data = quakes, aes(x = mag)) +
geom_histogram()
```{r}
```{r}
```{r}
library(ggplot2)
#單變數:連續型
ggplot(data = quakes, aes(x = mag)) +
geom_histogram()
rm(list=ls(all.names = TRUE))
library(NLP)
library(tm)
library(jiebaRD)
library(jiebaR)
library(RColorBrewer)
library(wordcloud)
filenames <- list.files(getwd(), pattern="*.txt")
files <- lapply(filenames, readLines)
docs <- Corpus(VectorSource(files))
#移除可能有問題的符號
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))
}
)
docs <- tm_map(docs, toSpace, "※")
docs <- tm_map(docs, toSpace, "◆")
docs <- tm_map(docs, toSpace, "‧")
docs <- tm_map(docs, toSpace, "的")
docs <- tm_map(docs, toSpace, "我")
docs <- tm_map(docs, toSpace, "是")
docs <- tm_map(docs, toSpace, "看板")
docs <- tm_map(docs, toSpace, "作者")
docs <- tm_map(docs, toSpace, "發信站")
docs <- tm_map(docs, toSpace, "批踢踢實業坊")
docs <- tm_map(docs, toSpace, "[a-zA-Z]")
docs <- tm_map(docs, toSpace, "推")
docs <- tm_map(docs, toSpace, "就")
docs <- tm_map(docs, toSpace, "了")
docs <- tm_map(docs, toSpace, "你")
docs <- tm_map(docs, toSpace, "就")
docs <- tm_map(docs, toSpace, "不")
docs <- tm_map(docs, toSpace, "都")
docs <- tm_map(docs, toSpace, "也")
docs <- tm_map(docs, toSpace, "要")
docs <- tm_map(docs, toSpace, "有")
docs <- tm_map(docs, toSpace, "會")
docs <- tm_map(docs, toSpace, "在")
docs <- tm_map(docs, toSpace, "沒")
docs <- tm_map(docs, toSpace, "好")
docs <- tm_map(docs, toSpace, "噓")
docs <- tm_map(docs, toSpace, "人")
docs <- tm_map(docs, toSpace, "很")
docs <- tm_map(docs, toSpace, "還")
docs <- tm_map(docs, toSpace, "啊")
docs <- tm_map(docs, toSpace, "說")
docs <- tm_map(docs, toSpace, "他")
docs <- tm_map(docs, toSpace, "嗎")
docs <- tm_map(docs, toSpace, "只")
docs <- tm_map(docs, toSpace, "跟")
docs <- tm_map(docs, toSpace, "但")
docs <- tm_map(docs, toSpace, "去")
docs <- tm_map(docs, toSpace, "覺得")
docs <- tm_map(docs, toSpace, "可以")
docs <- tm_map(docs, toSpace, "多")
docs <- tm_map(docs, toSpace, "什麼")
docs <- tm_map(docs, toSpace, "看")
docs <- tm_map(docs, toSpace, "吧")
docs <- tm_map(docs, toSpace, "真")
docs <- tm_map(docs, toSpace, "到")
docs <- tm_map(docs, toSpace, "用")
docs <- tm_map(docs, toSpace, "想")
docs <- tm_map(docs, toSpace, "被")
docs <- tm_map(docs, toSpace, "用")
docs <- tm_map(docs, toSpace, "們")
#移除標點符號 (punctuation)
#移除數字 (digits)、空白 (white space)
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, stripWhitespace)
docs
mixseg = worker()
jieba_tokenizer=function(d){
unlist(segment(d[[1]],mixseg))
}
seg = lapply(docs, jieba_tokenizer)
freqFrame = as.data.frame(table(unlist(seg)))
freqFrame = freqFrame[order(freqFrame$Freq,decreasing=TRUE), ]
library(knitr)
kable(head(freqFrame), format = "markdown")
```{r}
library(wordcloud)
wordcloud(freqFrame$Var1,freqFrame$Freq,
scale=c(5,0.1),min.freq=50,max.words=150,
random.order=TRUE, random.color=FALSE,
rot.per=.1, colors=brewer.pal(8, "Dark2"),
ordered.colors=FALSE,use.r.layout=FALSE,
fixed.asp=TRUE)
```
```{r}
setwd("C:/Users/yunhsuan/Desktop/chou/week3")
library(tm)
library(tmcn)
library(factoextra)
library(Matrix)
library(bitops)
library(httr)
library(RCurl)
library(XML)
library(NLP)
library(jiebaRD)
library(jiebaR)
from <- 6932 # 2018-07-16
to   <- 6939 # 2018-07-18
prefix = "https://www.ptt.cc/bbs/movie/index"
data <- list()
for( id in c(from:to) )
{
url  <- paste0( prefix, as.character(id), ".html" )
html <- htmlParse( GET(url) )
url.list <- xpathSApply( html, "//div[@class='title']/a[@href]", xmlAttrs )
data <- rbind( data, as.matrix(paste('https://www.ptt.cc', url.list, sep='')) )
}
data <- unlist(data)
head(data)
d.corpus <- Corpus( DirSource("./data/tfidf") )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
mixseg = worker()
jieba_tokenizer = function(d)
{
unlist( segment(d[[1]], mixseg) )
}
seg = lapply(d.corpus, jieba_tokenizer)
count_token = function(d)
{
as.data.frame(table(d))
}
tokens = lapply(seg, count_token)
n = length(seg)
TDM = tokens[[1]]
colNames <- names(seg)
colNames <- gsub(".txt", "", colNames)
for( id in c(2:n) )
{
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', colNames[1:id])
}
TDM[is.na(TDM)] <- 0
library(knitr)
kable(head(TDM))
mixseg = worker()
jieba_tokenizer = function(d)
{
unlist( segment(d[[1]], mixseg) )
}
seg = lapply(d.corpus, jieba_tokenizer)
count_token = function(d)
{
as.data.frame(table(d))
}
tokens = lapply(seg, count_token)
n = length(seg)
TDM = tokens[[1]]
colNames <- names(seg)
colNames <- gsub(".txt", "", colNames)
for( id in c(2:n) )
{
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', colNames[1:id])
}
TDM[is.na(TDM)] <- 0
library(knitr)
kable(head(TDM))
mixseg = worker()
jieba_tokenizer = function(d)
{
unlist( segment(d[[1]], mixseg) )
}
seg = lapply(d.corpus, jieba_tokenizer)
count_token = function(d)
{
as.data.frame(table(d))
}
tokens = lapply(seg, count_token)
n = length(seg)
TDM = tokens[[1]]
colNames <- names(seg)
colNames <- gsub(".txt", "", colNames)
for( id in c(2:n) )
{
TDM = merge(TDM, tokens[[id]], by="d", all = TRUE)
names(TDM) = c('d', colNames[1:id])
}
TDM[is.na(TDM)] <- 0
library(knitr)
kable(head(TDM))
kable(tail(TDM))
tf <- apply(as.matrix(TDM[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(TDM[,2:(n+1)]), 1, idfCal)
doc.tfidf <- TDM
# for(x in 1:nrow(TDM))
# {
#   for(y in 2:ncol(TDM))
#   {
#     doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
#   }
# }
tempY = matrix(rep(c(as.matrix(tf)), each = length(idf)), nrow = length(idf))
tempX = matrix(rep(c(as.matrix(idf)), each = length(tf)), ncol = length(tf), byrow = TRUE)
doc.tfidf[,2:(n+1)] <- (doc.tfidf[,2:(n+1)] / tempY) * tempX
stopLine = rowSums(doc.tfidf[,2:(n+1)])
delID = which(stopLine == 0)
kable(head(doc.tfidf[delID,1]))
tf <- apply(as.matrix(TDM[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(TDM[,2:(n+1)]), 1, idfCal)
doc.tfidf <- TDM
# for(x in 1:nrow(TDM))
# {
#   for(y in 2:ncol(TDM))
#   {
#     doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
#   }
# }
tempY = matrix(rep(c(as.matrix(tf)), each = length(idf)), nrow = length(idf))
tempX = matrix(rep(c(as.matrix(idf)), each = length(tf)), ncol = length(tf), byrow = TRUE)
doc.tfidf[,2:(n+1)] <- (doc.tfidf[,2:(n+1)] / tempY) * tempX
stopLine = rowSums(doc.tfidf[,2:(n+1)])
delID = which(stopLine == 0)
kable(head(doc.tfidf[delID,1]))
kable(tail(doc.tfidf[delID,1]))
tf <- apply(as.matrix(TDM[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(TDM[,2:(n+1)]), 1, idfCal)
doc.tfidf <- TDM
# for(x in 1:nrow(TDM))
# {
#   for(y in 2:ncol(TDM))
#   {
#     doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
#   }
# }
tempY = matrix(rep(c(as.matrix(tf)), each = length(idf)), nrow = length(idf))
tempX = matrix(rep(c(as.matrix(idf)), each = length(tf)), ncol = length(tf), byrow = TRUE)
doc.tfidf[,2:(n+1)] <- (doc.tfidf[,2:(n+1)] / tempY) * tempX
stopLine = rowSums(doc.tfidf[,2:(n+1)])
delID = which(stopLine == 0)
kable(head(doc.tfidf[delID,1]))
kable(tail(doc.tfidf[delID,1]))
TDM = TDM[-delID,]
doc.tfidf = doc.tfidf[-delID,]
TopWords = data.frame()
for( id in c(1:n) )
{
dayMax = order(doc.tfidf[,id+1], decreasing = TRUE)
showResult = t(as.data.frame(doc.tfidf[dayMax[1:5],1]))
TopWords = rbind(TopWords, showResult)
}
rownames(TopWords) = colnames(doc.tfidf)[2:(n+1)]
TopWords = droplevels(TopWords)
kable(TopWords)
TDM$d = as.character(TDM$d)
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
kable(head(AllTop))
TDM$d = as.character(TDM$d)
AllTop = as.data.frame( table(as.matrix(TopWords)) )
AllTop = AllTop[order(AllTop$Freq, decreasing = TRUE),]
kable(head(AllTop))
TopNo = 5
tempGraph = data.frame()
for( t in c(1:TopNo) )
{
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = n), nrow = n )
temp = cbind( colnames(doc.tfidf)[2:(n+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(n+1)]), word )
colnames(temp) = c("hour", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("hour", "freq", "words")
}
library(ggplot2)
library(varhandle)
install.packages("varhandle")
install.packages("varhandle")
library(varhandle)
tempGraph$freq = unfactor(tempGraph$freq)
ggplot(tempGraph, aes(hour, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
geom_line(aes(group = words, linetype = words))
TopNo = 5
tempGraph = data.frame()
for( t in c(1:TopNo) )
{
word = matrix( rep(c(as.matrix(AllTop$Var1[t])), each = n), nrow = n )
temp = cbind( colnames(doc.tfidf)[2:(n+1)], t(TDM[which(TDM$d == AllTop$Var1[t]), 2:(n+1)]), word )
colnames(temp) = c("hour", "freq", "words")
tempGraph = rbind(tempGraph, temp)
names(tempGraph) = c("hour", "freq", "words")
}
library(ggplot2)
library(varhandle)
tempGraph$freq = unfactor(tempGraph$freq)
ggplot(tempGraph, aes(hour, freq)) +
geom_point(aes(color = words, shape = words), size = 5) +
geom_line(aes(group = words, linetype = words))
filenames = as.array(paste0("./DATA/",colnames(doc.tfidf)[2:(n+1)],".txt"))
sizeResult = apply(filenames, 1, file.size) / 1024
showSize = data.frame(colnames(doc.tfidf)[2:(n+1)], sizeResult)
names(showSize) = c("hour", "size_KB")
ggplot(showSize, aes(x = hour, y = size_KB)) + geom_bar(stat="identity")
filenames = as.array(paste0("./DATA/",colnames(doc.tfidf)[2:(n+1)],".txt"))
sizeResult = apply(filenames, 1, file.size) / 1024
showSize = data.frame(colnames(doc.tfidf)[2:(n+1)], sizeResult)
names(showSize) = c("hour", "size_KB")
ggplot(showSize, aes(x = hour, y = size_KB)) + geom_bar(stat="identity")
filenames = as.array(paste0("./DATA/",colnames(doc.tfidf)[2:(n+1)],".txt"))
sizeResult = apply(filenames, 1, file.size) / 1024
showSize = data.frame(colnames(doc.tfidf)[2:(n+1)], sizeResult)
names(showSize) = c("hour", "size_KB")
ggplot(showSize, aes(x = hour, y = size_KB)) + geom_bar(stat="identity")
filenames = as.array(paste0("./DATA/",colnames(doc.tfidf)[2:(n+1)],".txt"))
sizeResult = apply(filenames, 1, file.size) / 1024
showSize = data.frame(colnames(doc.tfidf)[2:(n+1)], sizeResult)
names(showSize) = c("hour", "size_KB")
ggplot(showSize, aes(x = hour, y = size_KB)) + geom_bar(stat="identity")
filenames = as.array(paste0("./ptt/",colnames(doc.tfidf)[2:(n+1)],".txt"))
sizeResult = apply(filenames, 1, file.size) / 1024
showSize = data.frame(colnames(doc.tfidf)[2:(n+1)], sizeResult)
names(showSize) = c("hour", "size_KB")
library(ggplot2)
ggplot(showSize, aes(x = hour, y = size_KB)) + geom_bar(stat="identity")
filenames = as.array(paste0("./data/tfidf/",colnames(doc.tfidf)[2:(n+1)],".txt"))
sizeResult = apply(filenames, 1, file.size) / 1024
showSize = data.frame(colnames(doc.tfidf)[2:(n+1)], sizeResult)
names(showSize) = c("hour", "size_KB")
library(ggplot2)
ggplot(showSize, aes(x = hour, y = size_KB)) + geom_bar(stat="identity")
library(dplyr)
open_data <- read.csv("./data/countries.csv", stringsAsFactors=F)
